name: Project CI

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]
  workflow_dispatch:

jobs:
  backend-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install backend dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Check backend syntax
      run: |
        cd backend
        python -m py_compile main.py
        echo "Backend syntax check passed"

  frontend-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: 'frontend/package-lock.json'
        
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
        
    - name: Check frontend build
      run: |
        cd frontend
        npm run build
        echo "Frontend build check passed"

  chrome-extension-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Validate Chrome Extension Manifest
      run: |
        if [ -f "chrome-extension/manifest.json" ]; then
          echo "Chrome extension manifest found"
          node -e "const manifest = require('./chrome-extension/manifest.json'); console.log('Manifest validation passed:', manifest.name, 'v' + manifest.version);"
        else
          echo "Chrome extension manifest not found"
          exit 1
        fi
        
    - name: Run Chrome Extension Tests
      run: npm test
      env:
        CI: true

  web-app-api-check:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_USER: testuser
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install backend dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Set up test environment variables
      run: |
        echo "POSTGRES_DB=testdb" >> $GITHUB_ENV
        echo "POSTGRES_USER=testuser" >> $GITHUB_ENV
        echo "POSTGRES_PASSWORD=testpass" >> $GITHUB_ENV
        echo "POSTGRES_HOSTNAME=localhost" >> $GITHUB_ENV
        echo "POSTGRES_PORT=5432" >> $GITHUB_ENV
        echo "SESSION_SECRET_KEY=test-secret-key-for-testing-only" >> $GITHUB_ENV
        echo "FRONTEND_URL=http://localhost:3000" >> $GITHUB_ENV
        
    - name: Wait for PostgreSQL
      run: |
        for i in {1..30}; do
          if pg_isready -h localhost -p 5432 -U testuser; then
            break
          fi
          echo "Waiting for PostgreSQL..."
          sleep 2
        done
        
    - name: Run Web App API Tests
      run: |
        cd tests/web-app/unit-tests
        python -m pytest test_api_routes.py -v --tb=short
      env:
        PYTHONPATH: ${{ github.workspace }}
